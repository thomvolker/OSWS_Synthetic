---
title: "Practical 1: Creating synthetic data"
subtitle: "Fake it â€˜till you make it: Generating synthetic data with high utility in `R`"
author: "Thom Volker & Erik-Jan van Kesteren"
bibliography: osws.bib
link-citations: true
format: 
  html:
    toc: true
---



# Introduction

---

In this workshop, you will learn how to create and evaluate synthetic data in `R`. In the practical, we will work with the `R` package `mice` [@mice]. `mice` was originally developed to impute missing data, but, as you will experience, can also be used to impute synthetic data [see @volker_vink_synthetic_mice_2021]. Other alternatives to create synthetic data are, for example, the R-package `synthpop` [@synthpop], or the stand-alone software `IVEware` [@iveware]. 

If you have `R` and `R Studio` installed on your device, you can follow all the steps from this practical using your local version of R Studio. In case you do not have an installation of `R` and `R Studio`, you can quickly create an account on [R Studio Cloud](https://login.rstudio.cloud/register), and work with a project that is set-up for this workshop (the link will follow). Note that you have the opportunity to work with your own data (you can also use data provided by us). If you are going to work via `R Studio Cloud`, you may not want to upload your own data to this server. In this case, you can still decide to work with the data provided by us. You could also install `R` and `R Studio` on the spot, but since we do not have infinite time, we advise to use `R Studio Cloud` if you have no access to `R` and `R Studio` on your device already.

---

# Data

---

For this workshop, we have prepared all exercises with the _Heart failure clinical records_ data set. However, you may also choose to work with a data set of your own liking. All steps exercises and solutions that we outline here should be applicable to another data set as well, but some data processing might be required before our example code works as it should. In the worst case, you might run into errors that we could not foresee, but we are more than happy to think along and help you to solve these issues.

---

## _Heart failure clinical records_


The *Heart failure clinical records* data set is a medical data set from the UCI Machine Learning Repository ([click here for the source](archive.ics.uci.edu/ml/datasets/Heart+failure+clinical+records)), originally collected by @tanvir_heart_failure_2017 from the Government College University, Faisalabad, Pakistan, and adapted and uploaded to the UCI MLR by @chicco_ml_2020. This data set contains medical information of $299$ individuals on $13$ variables, and is typically used to predict whether or not a patient will survive during the follow-up period, using several biomedical predictors.


If you decide to work with the *Heart failure clinical records* data and work in `R Studio Cloud`, you can access the environment related to this workshop [here](https://posit.cloud/content/5365182), including the scripts `P1.R` and `P2.R` that gets you started on importing the data, and installing and loading the required packages. You can continue working in this script. Make sure to save the project on your account, so that your changes are not deleted if you, for some reason, have to refresh the browser.

If you have `R Studio` installed on your own machine, you can download the *cleaned* version of the *Heart failure clinical records* data set from my GitHub and load it as `heart_failure`, by running the following line of code.

```{r load-data}
heart_failure <- readRDS(url("https://thomvolker.github.io/OSWS_Synthetic/data/heart_failure.RDS"))
```

The *Heart failure clinical records* data consists of the following variables:

```{r variables, echo=F, results='asis'}
vars <- c(age = "Age in years",
               anaemia = "Whether the patient has a decrease of red blood cells (No/Yes)",
               hypertension = "Whether the patient has high blood pressure (No/Yes)",
               creatinine_phosphokinase = "Level of the creatinine phosphokinase enzyme in the blood (mcg/L)",
               diabetes = "Whether the patient has diabetes (No/Yes)",
               ejection_fraction = "Percentage of blood leaving the heart at each contraction",
               platelets = "Platelets in de blood (kiloplatelets/mL)",
               sex = "Sex (Female/Male)",
               serum_creatinine = "Level of serum creatinine in the blood (mg/dL)",
               serum_sodium = "Level of serum sodium in the blood (mg/dL)",
               smoking = "Whether the patient smokes (No/Yes)",
               follow_up = "Follow-up period (days)",
               deceased = "Whether the patient deceased during the follow-up period")
paste0("- `", 
       names(vars), 
       "`: ", 
       vars,
       collapse = " \n") |>
  cat()
```

---

## Loading your own data


In case you brought your own data, you can load it into `R` using a function that matches your data format. Below, you can find several functions that might be helpful if you want to load the your data into `R`. You can use these functions both locally, or on `R Studio Cloud`, but make sure to install the required package first.

```{r load-own-data, echo = F}
tibble::tibble(`Programme` = c("Excel", "Excel", "SPSS", "Stata"), 
               `Format` = c(".xlsx", ".csv", ".sav", ".dta"), 
               `Command` = c('readxl::read_xlsx("path_to_file/data_name.xlsx")',
                             'readr::read_csv("path_to_file/data_name.csv")',
                             'haven::read_sav("path_to_file/data_name.sav")',
                             'haven::read_dta("path_to_file/data_name.dta")')) |>
  knitr::kable() |>
  kableExtra::kable_styling(c("striped", "hover"))
```

After loading in your own data, make sure that the variables in your data are coded accordingly (this can go wrong when transferring between data types). That is, make sure that your categorical variables are coded as factors and your numeric variables as numeric variables. To do so, you can make use of the following code. Note, however, that this is not a workshop on data wrangling: if importing your data into `R` creates a mess, it might be better to use the *Heart failure clinical records data*, so that you can spend your valuable time on creating synthetic data.

```{r reformat-variables, eval=FALSE}
data_name$variable  <- as.numeric(data_name$variable)
data_name$variable2 <- factor(data_name$variable, 
                              levels = values,       # values of the data
                              labels = value_labels) # labels of these values
```

If your data has the correct format, we can proceed to the next steps. Given that you are using your own data, we assume that you have (at least some) knowledge about the variables in your data. We will therefore skip the steps to obtain some descriptive information of the variables in your data, and continue to creating and evaluating synthetic data. 

In the sequel, we will outline how to create and evaluate synthetic data using the *Heart failure clinical records* data, but most of these steps should be directly applicable to your own data. In case something gives an error, do not hesitate to ask how the problem can be solved!

---

# Loading required packages

---

In this workshop, you will (at least) use the packages `mice` [@mice], `ggmice` [@ggmice], `ggplot2` [@ggplot2], `patchwork` [@patchwork], `psych` [@psych], `purrr` [@purrr] and `synthpop` [@synthpop]. Make sure to load them (in case you haven't installed them already, install them first, using `install.packages("package.name")`).

---

__1. Install the `R`-packages `mice` and `ggmice` from GitHub, and `ggplot2`, `patchwork`, `psych`, `purrr` and `synthpop` from `CRAN`, and load these packages using `library()`.__

---

::: {.callout-tip collapse=true}

## Show Code

```{r, install-packages}
#| eval: false
remotes::install_github("amices/mice")
remotes::install_github("amices/ggmice")
install.packages("ggplot2")
install.packages("patchwork")
install.packages("psych")
install.packages("purrr")
install.packages("tidyverse")
install.packages("synthpop")
```

```{r load-packages, message=F, warning=F}
library(mice)      # to create the synthetic data
library(ggmice)    # to make visualizations of the synthetic data
library(ggplot2)   # required when using ggmice
library(patchwork) # to stitch multiple figures together
library(psych)     # to obtain descriptive statistics
library(purrr)     # to work with multiply imputed synthetic datasets
library(tidyverse) # to do some data wrangling
library(synthpop)  # to assess the utility of our synthetic data
```

:::

---

# Getting to know the data

---

Before starting to work with ***any*** data, you must ***always*** get a basic understanding of what the data looks like. If you know what types your variables are and what the relationships between variables are supposed to be, it's (somewhat) easier to spot any errors you make in coding. 

---

__2. Inspect the first few rows of the data using `head()`.__

---

::: {.callout-tip collapse=true}

## Show Code

```{r}
#| label: head-data
#| results: false
head(heart_failure)
```

:::

::: {.callout-warning icon=false collapse=true}

## Show Output

```{r}
#| label: head-data-show
#| echo: false 
#| message: false
#| warning: false
heart_failure |>
  head() |>
  knitr::kable() |>
  kableExtra::kable_styling(bootstrap_options = c("striped", "hover")) |>
  kableExtra::scroll_box(width = "100%")
```

:::

---

__3. Use the `summary()` or `describe()` function to get a higher-level overview of the data.__

---

::: {.callout-tip collapse=true}

## Show Code `summary()`

```{r}
#| label: summary-data
#| results: hide
summary(heart_failure)
```

:::

::: {.callout-warning icon=false collapse=true}

## Show Output `summary()`

```{r}
#| label: summary-data-results
#| echo: false
summary(heart_failure)
```

:::


::: {.callout-tip collapse=true}

## Show Code `describe()`

```{r} 
#| label: describe-data
#| eval: false
describe(heart_failure)
```

:::

::: {.callout-warning icon=false collapse=true}

## Show Output `describe()`

```{r describe-data-knitr, echo=FALSE}
heart_failure |>
  describe() |>
  knitr::kable() |>
  kableExtra::kable_styling(bootstrap_options = c("striped", "hover")) |>
  kableExtra::scroll_box(width = "100%")
```

:::

<br>

The `summary()` function gives a basic description of the variables, whereas `describe()` also gives some information on the standard deviation, skewness and kurtosis. 


---

# Creating synthetic data

We will focus on two ways of creating synthetic data: 

- Parametric methods
- Non-parametric methods. 

::: {.callout-note collapse="true"}
## Expand To Learn About Parametric and Non-Parametric Data Synthesis

Broadly speaking, two methods for creating synthetic data can be distinguished. The first one is based on parametric imputation models, which assumes that the structure of the data is fixed, and draws synthetic values from a pre-specified probability distribution. That is, after estimating a statistical model, the synthetic data are generated from a probability distribution, without making any further use of the observed data. In general, this procedure is less likely to result in an accidental release of disclosive information. However, these parametric methods are often less capable of capturing the complex nature of real-world data sets.

The subtleties of real-world data are often better reproduced with non-parametric imputation models. Using this approach, a non-parametric model is estimated, resulting in a donor pool out of which a single observation per observation and per variable is drawn. These models thus reuse the observed data to serve as synthetic data. Accordingly, much of the values that were in the observed data end up in the synthetic data. However, these observed data are generally combined in unique ways, it is generally not possible to link this information to the original respondents. The non-parametric procedures often yield better inferences, while still being able to prevent disclosure risk (although more research into measures to qualify the remaining risks is required). Therefore, this practical will showcase how to generate synthetic data using one such non-parametric method: classification and regression trees [CART; @breiman_cart_1984].

:::

---

We will use both approaches to generate synthetic data. For the parametric methods, this implies that all variables are synthesized through linear and logistic conditional models. For the non-parametric methods, we will synthesize all data using classification and regression trees [CART\; @breiman_cart_1984].

::: {.callout-note collapse="true"}

## Expand To Learn More About The MICE Algorithm

In general, `mice` proceeds as follows: from first to the last column in your data set, the given variable is synthesized based on all other variables in the data. Specifically, a model is trained on the observed data, and new values for variable $X_j$ are imputed on the basis of all other variables $X_{-j}$. This procedure is repeated sequentially, until all variables are synthesized. In this way, the relationships between the variables are generally preserved. 

:::

---

Before we can use `mice` to generate synthetic data, we have to take care of some issues, because `mice` was not initially developed to create synthetic data. Specifically, we have to do two things: specify which values we want to synthesize and specify which method we want to use for the imputations.

---

__4. Create a matrix of the same dimensions as the original data called `where`, specifying all cells as the logical operator `TRUE`.__

---

_Hint:_ You can use the `mice` function `make.where()`.

::: {.callout-tip collapse=true}

## Show code

```{r}
#| label: make-where
where <- make.where(heart_failure, "all")
```

:::

---

__5. Create a vector of length `r ncol(heart_failure)` called `parametric`, to specify linear and logistic imputation models for continuous and categorical variables, respectively.__

---

_Hint:_ You can use `make.method()` to create an initial vector with imputation methods, with parameters `data = heart_failure`, `where = where` and `defaultMethod = c("norm", "logreg")`. 

::: {.callout-tip collapse=true}

## Show code

```{r}
#| label: make-param
parametric <- make.method(heart_failure, 
                          where = where, 
                          defaultMethod = c("norm", "logreg"))
```

:::

---

We will directly create a method object for non-parametric synthesis. Because we use CART regardless of the variable type, we only have to assign `"cart"` to an object called `nonparametric`.

---

__6. Create an object called `nonparametric`, and assign it the character string `"cart"`.__


---

::: {.callout-tip collapse=true}

## Show code

```{r}
#| label: make-nonparam
nonparametric <- "cart"
```

:::

---

Now we have specified which values ought to be synthetic, and which method to use to create the synthetic values, we can actually create the synthetic data.

---

__7. Use `mice()` to create `m = 1` synthetic data set in an object called `syn_param`, using the previously specified `parametric` method-vector and `where`-matrix.__

---

_Hint:_ When creating synthetic data, a single iteration is sufficient when there is no missing data, so we can set `maxit = 1`. Use `seed = 1` if you want to reproduce our results.

::: {.callout-tip collapse=true}

## Show code

```{r}
#| label: synthesize-parametric
#| results: false
syn_param <- mice(heart_failure, 
                  m = 1, 
                  maxit = 1,
                  method = parametric,
                  where = where,
                  seed = 1)
```

:::

---

We will directly create a synthetic data set using the non-parametric CART synthesis model.

---

__8. Use `mice()` to create `m = 1` synthetic data set in an object called `syn_nonparam`, using the `nonparametric` method object and the same `where`-matrix.__

---

_Hint:_ A single iteration is again sufficient. Use `seed = 1` if you want to reproduce our results.

::: {.callout-tip collapse=true}

## Show code

```{r}
#| results: false
syn_nonparam <- mice(heart_failure, 
                     m = 1, 
                     maxit = 1,
                     method = nonparametric,
                     where = where,
                     seed = 1)
```

:::

---

Creating the synthetic data is a piece of cake. However, after creating the synthetic data, we must assess its quality in terms of data utility and disclosure risk. This is what we will do in [Practical 2](https://thomvolker.github.io/OSWS_Synthetic/practical/P2.html).

---

__END OF PRACTICAL 1__ 

---

# Session Info

```{r}
sessionInfo()
```


